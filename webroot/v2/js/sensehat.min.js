function getParameterByName(name, url) {
	if (!url) url = window.location.href;
	name = name.replace(/[\[\]]/g, "\\$&");
	var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
		results = regex.exec(url);
	if (!results) return null;
	if (!results[2]) return '';
	return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function format_board(board){
	output_board = [];
	var filled_len = 7;
	while(filled_len>=0 && board[filled_len].length==0){filled_len--;}
	for (var i = 0; i <= filled_len; i++) {
		output_board[i]=[];
		for (var j = 0; j < board[i].length; j++) {
			if(!board[i][j]){
				output_board[i][j] = []
			} else {
				output_board[i][j] = hexToRgb(board[i][j])
			}
		}
	}
	return output_board
}

function format_sequence(sequence){
	new_seq = []
	for (var i = 0; i < sequence.length; i++) {
		new_seq.push({pixel:{x:sequence[i].x, y: sequence[i].y, colour:hexToRgb(sequence[i].colour)}})
	}
	return new_seq
}

function hexToRgb(hex) {
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? [
		parseInt(result[1], 16),
		parseInt(result[2], 16),
		parseInt(result[3], 16)
	] : null;
}

"use strict";

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      boardState: [[], [], [], [], [], [], [], []],
      boardHistory: [],
      boardHistoryStart: [[], [], [], [], [], [], [], []],
      frames: [],
      selectedColour: "#7289DA",
      selectedTool: "brush"
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Board, {
      state: this.state.boardState,
      history: this.state.boardHistory,
      historyStart: this.state.boardHistoryStart,
      updateStateFn: (board => {
        this.setState({
          boardState: board
        });
      }).bind(this),
      saveFrameFn: (frame => {
        this.setState({
          frames: this.state.frames.concat(frame)
        });
      }).bind(this),
      selectedColour: this.state.selectedColour
    }), /*#__PURE__*/React.createElement(Controls, {
      clearFn: (() => {
        this.setState({
          boardState: [[], [], [], [], [], [], [], []],
          boardHistory: [],
          boardHistoryStart: [[], [], [], [], [], [], [], []],
          frames: []
        });
      }).bind(this),
      setColourFn: (colour => {
        this.setState({
          selectedColour: colour
        });
      }).bind(this),
      setToolFn: (tool => {
        this.setState({
          selectedTool: tool
        });
      }).bind(this),
      submitFn: (() => {
        console.log(this.state.boardState);
      }).bind(this)
    }));
  }

}

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};

    this.updateCell = function (row, column) {
      let b = this.props.state;
      b[row][column] = this.props.selectedColour;
      this.props.updateStateFn(b);
    };
  }

  render() {
    let rows = [];

    for (var i = 0; i < 8; i++) {
      let row = /*#__PURE__*/React.createElement(Row, {
        key: "row" + i,
        index: i,
        updateCellFn: this.updateCell.bind(this),
        state: this.props.state[i]
      });
      rows = rows.concat(row);
    }

    let style = {
      borderCollapse: "collapse"
    };
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(this.props), /*#__PURE__*/React.createElement("table", {
      style: style
    }, /*#__PURE__*/React.createElement("tbody", null, rows)));
  }

}

class Row extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    let cells = [];

    for (var i = 0; i < 8; i++) {
      let cell = /*#__PURE__*/React.createElement(Cell, {
        key: "cell" + this.props.index + "-" + i,
        row: this.props.index,
        column: i,
        updateCellFn: this.props.updateCellFn,
        state: this.props.state[i]
      });
      cells = cells.concat(cell);
    }

    return /*#__PURE__*/React.createElement("tr", null, cells);
  }

}

class Cell extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    let bg = "";

    if (this.props.state) {
      bg = hexToRgb(this.props.state);
      bg = `rgb(${bg[0]},${bg[1]},${bg[2]})`;
    }

    let style = {
      height: "10px",
      width: "10px",
      border: "1px solid white",
      background: bg
    };
    return /*#__PURE__*/React.createElement("td", {
      onClick: () => {
        this.props.updateCellFn(this.props.row, this.props.column);
      },
      style: style
    });
  }

}

class Controls extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      onClick: () => {
        this.props.clearFn();
      }
    }, "Clear"), /*#__PURE__*/React.createElement("button", {
      onClick: () => {
        this.props.submitFn();
      }
    }, "Submit"));
  }

}